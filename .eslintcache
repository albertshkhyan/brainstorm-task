[{"D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\app\\reducers\\users.js":"1","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\api\\users.js":"2","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\app\\sagas\\createUserSaga.js":"3","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\components\\UserForm.jsx":"4","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\configs\\config.js":"5","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\components\\UserTable.jsx":"6"},{"size":3688,"mtime":1609366886000,"results":"7","hashOfConfig":"8"},{"size":3387,"mtime":1609370466000,"results":"9","hashOfConfig":"8"},{"size":877,"mtime":1609370712000,"results":"10","hashOfConfig":"8"},{"size":4403,"mtime":1609370284000,"results":"11","hashOfConfig":"8"},{"size":605,"mtime":1609367466000,"results":"12","hashOfConfig":"8"},{"size":9804,"mtime":1609370596000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14xdfw7",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\app\\reducers\\users.js",[],"D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\api\\users.js",[],"D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\app\\sagas\\createUserSaga.js",["29"],"import { call, takeEvery, put } from \"redux-saga/effects\";\r\n\r\nimport { USERS_ACTIONS } from \"configs/types\";\r\nimport userAPI from 'api/users';\r\nimport { setIsLoading } from '../reducers/users';\r\n\r\nfunction* createUserWorker({ userBody, fileData }) {\r\n    try {\r\n        yield put(setIsLoading(true));\r\n\r\n        if (fileData) {\r\n            const res = yield call(userAPI.uploadImage, fileData);\r\n            // console.log('res', res);//{}\r\n        }\r\n        const res = yield call(userAPI.createUser, userBody);\r\n        if (res.status === 201) {\r\n            alert(\"User created\");\r\n        }\r\n        yield put(setIsLoading(false));\r\n\r\n\r\n    } catch (error) {\r\n        console.log('error.response', error.response);\r\n    }\r\n}\r\n\r\nfunction* createUserWatcher() {\r\n    yield takeEvery(USERS_ACTIONS.CREATE_USER_SAGA, createUserWorker);\r\n}\r\n\r\nexport default createUserWatcher;","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\components\\UserForm.jsx",["30"],"import React, { useState } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport PhotoIcon from '@material-ui/icons/Photo';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { createUserSG } from './../app/reducers/users';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\t'& .MuiTextField-root': {\r\n\t\t\tmargin: theme.spacing(1),\r\n\t\t\t// width: \"25ch\",\r\n\t\t},\r\n\t\tpaper: {\r\n\t\t\tpadding: theme.spacing(2),\r\n\t\t\ttextAlign: 'center',\r\n\t\t\tcolor: theme.palette.text.secondary,\r\n\t\t},\r\n\t},\r\n\tbutton: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\ttextTransform: 'none',\r\n\t},\r\n\tuserName: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tsaveButton: {\r\n\t\twidth: '150px',\r\n\t},\r\n\tuploadButton: {\r\n\t\tpadding: '13px 60px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\toverflow: 'hidden',\r\n\t\ttextOverflow: 'ellipsis',\r\n\t},\r\n\tuploadInput: {\r\n\t\tdisplay: 'none',\r\n\t},\r\n}));\r\n\r\nexport default function UserForm() {\r\n\tconst classes = useStyles();\r\n\tconst isLoading = useSelector((state) => state.users.isLoading);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst [fileData, setFileData] = useState(null);\r\n\tconst [fileName, setFileName] = useState('');\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tname: '',\r\n\t\t\tlocation: '',\r\n\t\t\temail: '',\r\n\t\t},\r\n\t\tonSubmit: (values) => {\r\n\t\t\tformik.resetForm({\r\n\t\t\t\tvalues: { name: '', email: '', location: '' },\r\n\t\t\t});\r\n\t\t\tsetFileData(null);\r\n\t\t\tdispatch(createUserSG(values, fileData));\r\n\t\t},\r\n\t});\r\n\r\n\tconst handleFileInputChange = (event) => {\r\n\t\t//#when click save(submit) button we must send file on reducer\r\n\t\tconst files = event.target.files[0];\r\n\t\tsetFileData(files);\r\n\t\tsetFileName(files.name);\r\n\t};\r\n\r\n\treturn (\r\n\t\t// <form className={classes.root} noValidate autoComplete=\"off\">\r\n\t\t<form className={classes.root} onSubmit={formik.handleSubmit}>\r\n\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t<Grid className={classes.TextFields_Container} container direction=\"column\" justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tvalue={formik.values.name}\r\n\t\t\t\t\t\t\tclassName={classes.userName}\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\tid=\"outlined-basic\"\r\n\t\t\t\t\t\t\tlabel=\"User name\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t{/**SELECT IMAGE INPUT */}\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t// disabled={isSubmitting || fileState.status === 'uploading'}\r\n\t\t\t\t\t\t\tonChange={handleFileInputChange}\r\n\t\t\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\t\t\tclassName={classes.uploadInput}\r\n\t\t\t\t\t\t\tid=\"contained-button-file\"\r\n\t\t\t\t\t\t\tmultiple={false}\r\n\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<label htmlFor=\"contained-button-file\">\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tdisabled={isLoading}\r\n\t\t\t\t\t\t\t\ttype=\"button\" //for not send request\r\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\t\tmycolor=\"orange\" //color in mui reserver props, give warning when use color props\r\n\t\t\t\t\t\t\t\tclassName={`${classes.button} ${classes.uploadButton}`}\r\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\t\tcomponent=\"div\"\r\n\t\t\t\t\t\t\t\t// startIcon={<PhotoIcon />}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tUpload\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t{fileName && (\r\n\t\t\t\t\t\t\t<Typography noWrap className={classes.button}>\r\n\t\t\t\t\t\t\t\t{fileName}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tvalue={formik.values.email}\r\n\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tid=\"outlined-basic\"\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\t\tvalue={formik.values.location}\r\n\t\t\t\t\t\t\tname=\"location\"\r\n\t\t\t\t\t\t\tfullWidth\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tid=\"outlined-basic\"\r\n\t\t\t\t\t\t\tlabel=\"Location\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tdisabled={isLoading}\r\n\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\t\tsize=\"large\"\r\n\t\t\t\t\t\t\tclassName={`${classes.button} ${classes.saveButton}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Paper>\r\n\t\t</form>\r\n\t);\r\n}\r\n","D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\configs\\config.js",["31"],"D:\\FULLSTACK\\my_porjects_fullstack\\brain-storm-task\\src\\components\\UserTable.jsx",["32","33","34"],"import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\n\r\nimport SwitchButton from './SwitchButton';\r\nimport Preloader from './Preloader';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sortingSG, deleteUserSG } from 'app/reducers/users';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n\thead: {\r\n\t\tbackgroundColor: '#F1F3F5',\r\n\t\tcolor: theme.palette.common.black,\r\n\t},\r\n\tbody: {\r\n\t\tfontSize: 14,\r\n\t},\r\n}))(TableCell);\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n\tif (b[orderBy] < a[orderBy]) {\r\n\t\treturn -1;\r\n\t}\r\n\tif (b[orderBy] > a[orderBy]) {\r\n\t\treturn 1;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n\treturn order === 'desc'\r\n\t\t? (a, b) => descendingComparator(a, b, orderBy)\r\n\t\t: (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n\tconst stabilizedThis = array.map((el, index) => [el, index]);\r\n\tstabilizedThis.sort((a, b) => {\r\n\t\tconst order = comparator(a[0], b[0]);\r\n\t\tif (order !== 0) return order;\r\n\t\treturn a[1] - b[1];\r\n\t});\r\n\treturn stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n\t{ id: 'photo', numeric: false, disablePadding: true, label: 'Photo' },\r\n\t{ id: 'name', numeric: false, disablePadding: false, label: 'Name' },\r\n\t{ id: 'location', numeric: false, disablePadding: false, label: 'Location' },\r\n\t{ id: 'registeredDate', numeric: true, disablePadding: false, label: 'Registerd date' },\r\n\t{ id: 'lastActiveDate', numeric: false, disablePadding: false, label: 'Last active date' },\r\n\t{ id: 'email', numeric: false, disablePadding: false, label: 'Email' },\r\n\t{ id: 'action', numeric: false, disablePadding: false, label: 'Action' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n\tconst { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n\tconst createSortHandler = (property) => (event) => {\r\n\t\tonRequestSort(event, property);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TableHead>\r\n\t\t\t<TableRow>\r\n\t\t\t\t<StyledTableCell padding=\"checkbox\">\r\n\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\tindeterminate={numSelected > 0 && numSelected < rowCount}\r\n\t\t\t\t\t\tchecked={rowCount > 0 && numSelected === rowCount}\r\n\t\t\t\t\t\tonChange={onSelectAllClick}\r\n\t\t\t\t\t\tinputProps={{ 'aria-label': 'select all desserts' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</StyledTableCell>\r\n\t\t\t\t{headCells.map((headCell) => (\r\n\t\t\t\t\t<StyledTableCell\r\n\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t// align={headCell.numeric ? 'right' : 'left'}\r\n\t\t\t\t\t\talign=\"left\"\r\n\t\t\t\t\t\tpadding={headCell.disablePadding ? 'none' : 'default'}\r\n\t\t\t\t\t\tsortDirection={orderBy === headCell.id ? order : false}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\tactive={orderBy === headCell.id}\r\n\t\t\t\t\t\t\tdirection={orderBy === headCell.id ? order : 'asc'}\r\n\t\t\t\t\t\t\tonClick={createSortHandler(headCell.id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{headCell.label}\r\n\t\t\t\t\t\t\t{orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t{order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t</StyledTableCell>\r\n\t\t\t\t))}\r\n\t\t\t</TableRow>\r\n\t\t</TableHead>\r\n\t);\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n\tclasses: PropTypes.object.isRequired,\r\n\tnumSelected: PropTypes.number.isRequired,\r\n\tonRequestSort: PropTypes.func.isRequired,\r\n\tonSelectAllClick: PropTypes.func.isRequired,\r\n\torder: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n\torderBy: PropTypes.string.isRequired,\r\n\trowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tpaper: {\r\n\t\twidth: '100%',\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\ttable: {\r\n\t\tminWidth: 750,\r\n\t},\r\n\tvisuallyHidden: {\r\n\t\tborder: 0,\r\n\t\tclip: 'rect(0 0 0 0)',\r\n\t\theight: 1,\r\n\t\tmargin: -1,\r\n\t\toverflow: 'hidden',\r\n\t\tpadding: 0,\r\n\t\tposition: 'absolute',\r\n\t\ttop: 20,\r\n\t\twidth: 1,\r\n\t},\r\n}));\r\n\r\nexport default function EnhancedTable() {\r\n\tconst classes = useStyles();\r\n\tconst [order, setOrder] = React.useState('asc');\r\n\tconst [orderBy, setOrderBy] = React.useState('name');\r\n\tconst [selected, setSelected] = React.useState([]);\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst usersData = useSelector((state) => state.users.users);\r\n\tconst isLoading = useSelector((state) => state.users.isLoading);\r\n\r\n\tconst handleRequestSort = (event, property) => {\r\n\t\tconst isAsc = orderBy === property && order === 'asc';\r\n\t\tif (property === 'action') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tdispatch(sortingSG(property, order)); //sort, order\r\n\t\tsetOrder(isAsc ? 'desc' : 'asc');\r\n\t\tsetOrderBy(property);\r\n\t};\r\n\r\n\tconst deleteUser = (userId) => {\r\n\t\tdispatch(deleteUserSG(userId));\r\n\t};\r\n\r\n\tconst handleSelectAllClick = (event) => {\r\n\t\tif (event.target.checked) {\r\n\t\t\tconst newSelecteds = usersData && usersData.map((n) => n.name);\r\n\t\t\tsetSelected(newSelecteds);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetSelected([]);\r\n\t};\r\n\r\n\tconst handleClick = (event, name) => {\r\n\t\tconst selectedIndex = selected.indexOf(name);\r\n\t\tlet newSelected = [];\r\n\r\n\t\tif (selectedIndex === -1) {\r\n\t\t\tnewSelected = newSelected.concat(selected, name);\r\n\t\t} else if (selectedIndex === 0) {\r\n\t\t\tnewSelected = newSelected.concat(selected.slice(1));\r\n\t\t} else if (selectedIndex === selected.length - 1) {\r\n\t\t\tnewSelected = newSelected.concat(selected.slice(0, -1));\r\n\t\t} else if (selectedIndex > 0) {\r\n\t\t\tnewSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n\t\t}\r\n\r\n\t\tsetSelected(newSelected);\r\n\t};\r\n\r\n\tconst isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Paper className={classes.paper}>\r\n\t\t\t\t{/* <EnhancedTableToolbar numSelected={selected.length} /> */}\r\n\t\t\t\t<TableContainer>\r\n\t\t\t\t\t<Table\r\n\t\t\t\t\t\tclassName={classes.table}\r\n\t\t\t\t\t\taria-labelledby=\"tableTitle\"\r\n\t\t\t\t\t\t// size={dense ? 'small' : 'medium'}\r\n\t\t\t\t\t\taria-label=\"enhanced table\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<EnhancedTableHead\r\n\t\t\t\t\t\t\tclasses={classes}\r\n\t\t\t\t\t\t\tnumSelected={selected.length}\r\n\t\t\t\t\t\t\torder={order}\r\n\t\t\t\t\t\t\torderBy={orderBy}\r\n\t\t\t\t\t\t\tonSelectAllClick={handleSelectAllClick}\r\n\t\t\t\t\t\t\tonRequestSort={handleRequestSort}\r\n\t\t\t\t\t\t\trowCount={10}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t{/* {stableSort(usersData, getComparator(order, orderBy)) */}\r\n\r\n\t\t\t\t\t\t\t{isLoading && (\r\n\t\t\t\t\t\t\t\t<TableRow align=\"center\">\r\n\t\t\t\t\t\t\t\t\t<TableCell rowSpan={4} colSpan={10} align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" my={3}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Preloader />\r\n\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t{!isLoading &&\r\n\t\t\t\t\t\t\t\tusersData &&\r\n\t\t\t\t\t\t\t\tusersData.map((row, index) => {\r\n\t\t\t\t\t\t\t\t\tconst isItemSelected = isSelected(row.name);\r\n\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\taria-checked={isItemSelected}\r\n\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={row.id}\r\n\t\t\t\t\t\t\t\t\t\t\tselected={isItemSelected}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => handleClick(event, row.name)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={isItemSelected}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar alt=\"avatar\" src={row.photo} />\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.location}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.lastActiveDate}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.registeredDate}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.email}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Box width={1} display=\"flex\" justifyContent=\"space-between\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<SwitchButton row={row} disabled={row.disabled} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteUser(row.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"delete\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.margin}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon style={{ color: 'red' }} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t{/* {emptyRows > 0 && (\r\n\t\t\t\t\t\t\t\t<TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n\t\t\t\t\t\t\t\t\t<TableCell colSpan={6} />\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t)} */}\r\n\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t</Table>\r\n\t\t\t\t</TableContainer>\r\n\t\t\t\t{/* <TablePagination\r\n\t\t\t\t\trowsPerPageOptions={[5, 10, 25]}\r\n\t\t\t\t\tcomponent=\"div\"\r\n\t\t\t\t\tcount={rows.length}\r\n\t\t\t\t\trowsPerPage={rowsPerPage}\r\n\t\t\t\t\tpage={page}\r\n\t\t\t\t\tonChangePage={handleChangePage}\r\n\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\r\n\t\t\t\t/> */}\r\n\t\t\t</Paper>\r\n\t\t\t{/* <FormControlLabel control={<Switch checked={dense} onChange={handleChangeDense} />} label=\"Dense padding\" /> */}\r\n\t\t</div>\r\n\t);\r\n}\r\n",{"ruleId":"35","severity":1,"message":"36","line":12,"column":19,"nodeType":"37","messageId":"38","endLine":12,"endColumn":22},{"ruleId":"35","severity":1,"message":"39","line":11,"column":8,"nodeType":"37","messageId":"38","endLine":11,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":1,"column":1,"nodeType":"42","endLine":21,"endColumn":2},{"ruleId":"35","severity":1,"message":"43","line":18,"column":8,"nodeType":"37","messageId":"38","endLine":18,"endColumn":23},{"ruleId":"35","severity":1,"message":"44","line":47,"column":10,"nodeType":"37","messageId":"38","endLine":47,"endColumn":23},{"ruleId":"35","severity":1,"message":"45","line":53,"column":10,"nodeType":"37","messageId":"38","endLine":53,"endColumn":20},"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'PhotoIcon' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'TablePagination' is defined but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used."]